#!/usr/bin/env python3
# from typing import *

#from collections import deque
#import numpy as np

def DFS(x, y, H, W, dxdy, S, V, id):
    stack = [[x,y]] # スタート地点をスタックに登録
    V[y][x] = id
    count = 1

    while (1):
        check = 0
        for dx, dy in dxdy:
            nx, ny = x+dx, y+dy
            if 0 <= ny < H and 0 <= nx < W:
                if S[ny][nx] == "." and V[ny][nx] == 0:
                    stack.append([x,y])
                    x, y = nx, ny
                    check = 1
                    V[ny][nx] = id
                    count += 1
                    break
                elif S[ny][nx] == "*" and V[ny][nx] != id:
                    V[ny][nx] = id
                    count += 1
        if check == 0:
            if stack: # 行き止まり
                x, y = stack.pop()
            else:
                break
    return count

# def solve(H: int, W: int, S: List[str]) -> int:
def solve(H, W, S):
    S = [[t for t in s] for s in S] # 文字列を文字の配列に

    V = [[0 for j in range(W)] for i in range(H)] # 訪問済みフラグ用

    Max = 0
    dxdy = [[1,0],[0,1],[-1,0],[0,-1]] # (x,y) 移動方向設定

    #import time
    #start1 = time.perf_counter() #計測開始

    # 文字の置き換え
    for i in range(H):
        for j in range(W):
            if S[i][j] == "#":
                if j-1 >= 0   and S[i][j-1] == ".":
                    S[i][j-1] = "*"
                if j+1 <= W-1 and S[i][j+1] == ".":
                    S[i][j+1] = "*"
                if i-1 >= 0   and S[i-1][j] == ".":
                    S[i-1][j] = "*"
                if i+1 <= H-1 and S[i+1][j] == ".":
                    S[i+1][j] = "*"

    #start2 = time.perf_counter() #計測終了
    #print('{:.5f} ms'.format((start2-start1)*1000))

    # 探索
    id = 0
    for i in range(H):
        for j in range(W):
            if S[i][j] == '.' and V[i][j] == 0 :
                id += 1
                count = DFS(j, i, H, W, dxdy, S, V, id)
                if Max < count: Max = count

    #start3 = time.perf_counter() #計測終了
    #print('{:.5f} ms'.format((start3-start2)*1000))

    for i in range(H):
        for j in range(W):
            if S[i][j] == '*' :
                count = 1
                break

    if Max < count:
        Max = count

    #start4 = time.perf_counter() #計測終了
    #print('{:.5f} ms'.format((start4-start3)*1000))

    return Max

# generated by oj-template v4.8.1 (https://github.com/online-judge-tools/template-generator)
def main():
    H, W = map(int, input().split())
    S = [None for _ in range(H)]
    for i in range(H):
        S[i] = input()
    a = solve(H, W, S)
    print(a)

def main2():
    with open("./abc351/abc351_d/test/sample-2.in") as f:
        a = f.read().split()
        H, W = map(int, a[:2])
        a = a[2:]

    S = [None for _ in range(H)]
    for i in range(H):
        S[i] = a[i]
    a = solve(H, W, S)
    print(a)

def main3():
    import generate
    H,W,S = generate.gen()
    print(S)

    #import time
    #start = time.perf_counter() # 計測開始
    a = solve(H, W, S)

    #end = time.perf_counter()   # 計測終了
    #print('{:.5f} ms'.format((end-start)*1000))
    print(a)
    print(H,W)

if __name__ == '__main__':
    main()
